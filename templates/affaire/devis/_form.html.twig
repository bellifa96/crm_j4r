{% block stylesheets %}
    {{ encore_entry_link_tags('devis') }}
{% endblock %}


<style>


    select.invalid {
        background-color: #ffdddd;
    }


    #encadre-marge {
        cursor: pointer;
    }

    #menu-marge {
        display: none;
        position: fixed;
        top: 0;
        right: 0;
        height: 100%;
        width: 40%;
        z-index: 1;
        background: whitesmoke;
        border: 1px solid black;
        color: #0e4377;
    }

    #loader-devis-page {
        position: fixed;
        z-index: 9999;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }

    #loader-devis-page .modal-dialog {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .ouvrage-attribut {
        cursor: pointer;
    }

    .placeholder-italic::placeholder {
        font-style: italic;
    }

    .placeholder-italic.placeholder-active {
        font-style: normal;
    }

    .custom-select select {
        font-style: italic;
    }

    .custom-select select option {
        font-style: inherit;
    }

    .ouvrage-children {
        display: none;
    }

    .arrow {
        display: inline-block;
        width: 10px;
        height: 10px;
        border: solid #0e4377;
        border-width: 2px 2px 0 0;
        transform: rotate(45deg);
        transition: transform 0.3s ease-in-out;
        cursor: pointer;
    }

    .arrow.down {
        transform: rotate(135deg);
    }

    .chakra-input {
        color: #0E4377;
        border-bottom: inherit;
    }

    .chakra-input:hover {
        border-bottom: 1px solid;
    }



</style>


<div id="loader-devis-page" class="modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row justify-content-between">
    <div class="col-md-auto">
        <a href=" {{ referer }} ">
            <svg viewBox="0 0 24 24" style="width:50px;" focusable="false" class="chakra-icon css-onkibi"
                 aria-hidden="true">
                <path fill="currentColor" d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"></path>
            </svg>
            Retour
        </a>
    </div>
</div>

<div class="row mt-4">

    <div class="col-md-8 page-block m-auto">
        <div class="row align-items-center">

            <div class="col-md-3">
                <label for="devis_debourseTotalHT">Déboursé total HT</label>
                <input type="text" id="devis_debourseTotalHT" class="form-control"
                       value='{{ devis.debourseTotalHT|number_format(3,'.',' ') }}'
                       name="devis[debourseTotalHT]" disabled>
            </div>
            <div style="font-size: 1.5rem" class="col-md-1">

            </div>
            <div class="col-md-3">

                <label for="devis_marge">Marge totale</label>
                <input type="text" id="devis_marge" class="form-control"
                       value='{{ (devis.prixDeVenteHT - devis.debourseTotalHT)|number_format(3,'.',' ') }}'
                       name="devis[margeTotal]" disabled>
            </div>
            <div style="font-size: 1.5rem" class="col-md-1">

            </div>
            <div class="col-md-4">
                <label for="devis_prixDeVenteHT">Prix de vente HT</label>
                <input type="text" id="devis__prix_de_vente" class="form-control"
                       value='{{ devis.prixDeVenteHT|number_format(3,'.',' ') }}'
                       name="devis[prixDeVenteHT]" disabled>
            </div>
            <div class="col-md-3">
                <label for="devis_tva">TVA</label>
                <input type="text" id="devis_tva" class="form-control"
                       value='{{ devis.tva }} %'
                       name="devis[tva]" disabled>
            </div>
            <div style="font-size: 1.5rem" class="col-md-1">

            </div>
            <div class="col-md-3">

                <label for="devis_marge">%Marge</label>
                <input type="text" id="devis_marge" class="form-control"
                       value='{{ devis.marge|number_format(3,'.',' ') }}' element="devis"
                       name="devis[marge]">
            </div>
            <div style="font-size: 1.5rem" class="col-md-1">
            </div>
            <div class="col-md-4">
                <label for="devis_prixDeVente">Prix de vente TTC</label>
                <input type="text" id="devis_prixDeVente" class="form-control"
                       value='{{ (devis.prixDeVenteHT + (devis.tva / 100 * devis.prixDeVenteHT))|number_format(3,'.',' ') }}'
                       name="devis[prixDeVente]" disabled>
            </div>
        </div>
    </div>

</div>

<div id="menu-marge">
    <h3 class="ms-2">Feuille de vente du devis</h3>
    <hr>
    <div class="mt-3 ms-2">
        <p>La feuille de vente permet d'analyser le chiffrage du devis et d'ajuster certains montants. Les ajustements
            réalisés dans la feuille de vente vont impacter les montants de chaque ouvrage ou lot du devis.</p>
        <div class="col-md-11 page-block mt-2">
            <h4>Marge du devis</h4>
            <div class="row align-items-center">

                <div class="col-md-3">
                    <label for="devis_fraisGeneraux">Frais généraux</label>
                    <input type="text" id="devis_fraisGeneraux" class="form-control"
                           value='{{ devis.fraisGeneraux }}'
                           name="devis[fraisGeneraux]" disabled>
                </div>
                <div style="font-size: 1.5rem" class="col-md-1">
                    X
                </div>
                <div class="col-md-3">

                    <label for="devis_margeBeneficiaire">Marge bénéficiaire</label>
                    <input type="text" id="devis_margeBeneficiaire" class="form-control"
                           value='{{ devis.margeBeneficiaire }}'
                           name="devis[margeBeneficiaire]" disabled>
                </div>
                <div style="font-size: 1.5rem" class="col-md-1">
                    =
                </div>
                <div class="col-md-4">

                    <label for="devis_margeTotalee">Marge totale</label>
                    <input type="text" id="devis_margeTotalee" class="form-control"
                           value='{{ devis.fraisGeneraux * devis.margeBeneficiaire }}'
                           name="devis[margeTotale]" disabled>
                </div>
            </div>
        </div>

        <div class="col-md-11 page-block mt-2">
            <h4>Prix de vente du devis</h4>
            <div class="row align-items-center">

                <div class="col-md-3">
                    <label for="devis_debourseTotalHTT2">Déboursé total HT</label>
                    <input type="text" id="devis_debourseTotalHTT2" class="form-control"
                           value='{{ devis.debourseTotalHT }}'
                           name="devis[debourseTotalHT]" disabled>
                </div>
                <div style="font-size: 1.5rem" class="col-md-1">
                    X
                </div>
                <div class="col-md-3">

                    <label for="devis_margeTotale">Marge totale</label>
                    <input type="text" id="devis_margeTotale" class="form-control"
                           value='{{ devis.fraisGeneraux * devis.margeBeneficiaire }}'
                           name="devis[margeTotale]" disabled>
                </div>
                <div style="font-size: 1.5rem" class="col-md-1">
                    =
                </div>
                <div class="col-md-4">

                    <label for="devis_prixDeVenteHT2">Prix de vente HT</label>
                    <input type="text" id="devis_prixDeVenteHT2" class="form-control"
                           value='{{ devis.prixDeVenteHT }}'
                           name="devis[prixDeVenteHT]" disabled>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="mt-4 col-md-11 m-auto">
    <div class=" css-1fnl9bt">

        <div class="template-lot">

            <div class="tab-el-left"></div>
            <div class="tab-el-left">N°</div>
            <div class="tab-el-left">Dénomination</div>
            <div class="tab-el-left">Quantité</div>
            <div class="tab-el-left">Unité</div>
            <div class="tab-el-left">Déboursé U HT</div>
            <div class="tab-el-left">Déboursé Total HT</div>
            <div class="tab-el-left">%Marge</div>
            <div class="tab-el-left text-end">Prix de vente Total HT</div>
            <div class="tab-el-left"></div>


        </div>

    </div>

    <div id="main-devis">
        <ul id="sortable-elements">
            {{ html|raw('html') }}
        </ul>

    </div>
</div>

<div class="row css-gg4vpm buttons">
    <div>
        <button type="button" class="css-15nl7at add-lot">
            + Créer un lot
        </button>
        {# <button type="button" class="css-15nl7at import-ouvrage">
            + Importer un ouvrage
        </button>
        <button type="button" class="css-15nl7at" id="add-ouvrage">
            + Créer un ouvrage
        </button>
        #}
    </div>
</div>

<div class="mt-5">
    <button class="btn btn-primary profile-button" type="submit">Enregistrer</button>
</div>


<script>


    // on sauvegarde l'element selectioné (lot/ouvrage/composant) 
    let selectedElement = null;
    let selectedElementId = null;
    let selectedElementType = null;


    // on ecoute sur le bouton add-element-button (c'est le + dans le html) qui nous permet d'ajouter un lot  ou un ouvrage
    $('body').on('click', '.add-element-button', function () {
        // on recupere l'id du parent 
        let id = $(this).attr('id').replaceAll('bi-plus-circle-', '');
        // on cache le bouton + afin d'eviter d'avoir 2 evenement
        $(this).hide();
        // on affiche le loader
        $('#spinner-' + id).show();

        // si on clique sur + dans un lot alors on ajoute un ouvrage
        if ($(this).attr('type') === 'lot') {
            newOuvrage(id);
        }
        // et si on clique sur + dans un ouvrage alors on ajoute un composant
        else if ($(this).attr('type') === 'ouvrage') {
            let origine = $('#devis_ouvrages_' + id + '_denomination').prop("tagName").toLowerCase() === "input" ? $('#devis_ouvrages_' + id + '_denomination').attr('origine') : $('#devis_ouvrages_' + id + '_denomination').val();
            if (origine !== null) {
                newComposant(id, origine);
            } else {
                $(this).show();
                $('#spinner-' + id).hide();
            }
        }
    });

    // la fonction nous permet d'ajouter un nouveau ouvrage dans un lot
    // id = l'id du lot (donc du parent)
    function newOuvrage(id) {
        $.post('/affaire/devis/ouvrage/new/' + '{{ devis.id }}' + '/' + id, function (response) {
            const data = JSON.parse(response);
            if (data.idParent != null) {
                $('#lot-ul-' + id).append(data.html);
            } else {
                $('#main-devis').append(data.html);
            }
            $("#bi-plus-circle-" + id).show();
            $('#spinner-' + id).hide();
        })
    }

    // la fonction nous permet d'ajouter un nouveau composant dans un ouvrage
    // l'id est celui du parent
    // origine represente l'id de l'ouvrage d'origine à partir du quel on a crée l'ouvrage actuel 
    function newComposant(id, origine) {
        $.post('/affaire/devis/composant/new/' + '{{ devis.id }}' + '/' + id + '/' + origine, function (response) {
            const data = JSON.parse(response);
            if (data.idParent != null) {
                $("#ouvrage-ul-" + data.idParent).append(data.html)
                // $(data.html).append($('#element-' + data.idParent));
            } else {
                $('#main-devis').append(data.html);
            }
            $("#bi-plus-circle-" + id).show();
            $('#spinner-' + id).hide();

        })
    }

    //  on ecoute sur les 2 autres boutons d'ajout de lot 
    $('body').on('click', '#add-lots, .add-lot', function () {
        var parentId = selectedElementId;
        var parentType = selectedElementType;
        let path = "{{ path('app_affaire_lot_new', {'id':devis.id}) }}";
        $.post(path, {
            parentId: selectedElementId,
            parentType: selectedElementType
        }, function (data) {
            if (code = 200) {
                if (parentId != null && parentType == "lot") {
                    $("#lot-ul-" + parentId).append(JSON.parse(data).html);
                } else {
                    $('#sortable-elements').append(JSON.parse(data).html);
                }
                $("#lot").modal('show');
                $('.svg').remove();
                $('.organisation').remove();
                const lotId = data.lot;
            }
        })

    })

    // fonction qui permet de dupliquer des ouvrages ou des lots (non utilisé pour l'instant)

    $('body').on('click', '.dupliquer-element', function () {

        const element = $(this);
        let parentId = null;
        if (element.parent().parent().parent().parent().hasClass('children')) {
            parentId = element.parent().parent().parent().parent().attr('id').replace('lot-ul-', '');
        }

        // si on a pas d'element selectionné alors on ne fait rien
        if (selectedElementId == null) {
            return;
        }

        var id = selectedElementId;

        let path = "{{ path('app_affaire_element_dupliquer', {'id':devis.id}) }}";
        $("#loader-devis-page").modal("show");

        $.post(path, {
            id: selectedElementId,
            type: selectedElementType,
            idParent: parentId
        }, function (response) {
            response = JSON.parse(response);
            if (response.code == 200) {
                if (response.idParent != null) {
                    console.log('oui');
                    $('#lot-ul-' + response.idParent).append(response.html);
                } else {
                    console.log(response.html);
                    $('#sortable-elements').append(response.html);
                }
                // on met ajout les chiffres de tous les elements impactés
                updateData(response.data)
                // et on cache le loader
                $("#loader-devis-page").modal("hide");
            }
        })
    })


    // on ecoute sur les boutons de suppression d'element (ouvrage/composant/lot)
    $('body').on('click', '#delete-lot, #delete-ouvrage,.delete-composant', function () {

        const element = $(this);

        // si on clique sur le bouton delete d'un composant et qu'on a pas de selected element alors on initialise les valeurs de :
        //selectedElementId && selectedElementType
        if (element.hasClass('delete-composant') && selectedElementId == null || (element.hasClass('delete-composant') && selectedElementId != element.attr('id').replace('delete-composant-', ''))) {
            selectedElementId = element.attr('id').replace('delete-composant-', '');
            selectedElementType = "composant";
        }

        // si on a pas d'element selectionné alors on ne fait rien
        if (selectedElementId == null) {
            return;
        }

        var id = selectedElementId;

        let path = "{{ path('app_affaire_devis_element_delete', {'id':devis.id}) }}";
        $("#loader-devis-page").modal("show");
        $.post(path, {
            id: selectedElementId,
            type: selectedElementType
        }, function (response) {
            response = JSON.parse(response);
            if (response.code == 200) {
                // si on a success alors on vide les variables qui sauve l'element selectionné 
                selectedElementId = null;
                selectedElementType = null;
                if (id != null) {
                    // si l'element a des enfants alors on supprime la div qui contient ses enfants 
                    if ($('#element-' + id).next().hasClass('children')) {
                        $('#element-' + id).next().remove();
                    }
                    // on supprime la div de l'element
                    $('#element-' + id).remove();
                    // on met ajout les chiffres de tous les elements impactés 
                    updateData(response.data)
                    // et on cache le loader
                    $("#loader-devis-page").modal("hide");
                }
            }
        })

    })

    // contextMenu lot
    $('body').on('click', '.menu-lot', function () {
        let div = `<div class="context-menu">
                    <div class="item-menu" id="import-ouvrage"><i class="bi bi-reply-all-fill"></i>Importer des ouvrages</div>
                    <div class="item-menu" id="add-lots"><i class="bi bi-plus-square"></i>Créer un sous-lot</div>
                    <div class="item-menu" id="dupliquer-lot"><i class="bi bi-stickies"></i>Dupliquer</div>
                    <div class="item-menu" id="delete-lot"><i class="bi bi-trash-fill"></i>Supprimer</div>
                </div>`;
        div = `<div class="context-menu">
                    <div class="item-menu dupliquer-element" type="lot"><i class="bi bi-stickies"></i>Dupliquer</div>
                    <div class="item-menu" id="delete-lot"><i class="bi bi-trash-fill"></i>Supprimer</div>
                </div>`;
        $(this).parent().parent().parent().parent().parent().parent().append(div);
    })

    // contextMenu ouvrage
    $('body').on('click', '.menu-ouvrage', function () {
        let div = `<div class="context-menu">
                    <div class="item-menu dupliquer-element" type="ouvrage"><i class="bi bi-stickies"></i>Dupliquer</div>
                    <div class="item-menu" id="delete-ouvrage"><i class="bi bi-trash-fill"></i>Supprimer</div>
                </div>`;

        $(this).parent().parent().parent().parent().parent().parent().append(div);
    })


    // on ecoute sur la listes des elements afin de selectionner l'element cliqué
    $('body').on('click', '#sortable-elements li', function () {
        let firstDiv = $(this).find('div:first');
        selectedElement = firstDiv;
        selectedElementId = firstDiv.attr('id').replaceAll('element-', '');
        selectedElementType = firstDiv.attr('type');
    });

    // on ecoute sur le body si on clique sur l'un des elements on va pouvoir selectionner l'element cliqué et sinon on met à null les variables suivante :
    //               selectedElement = null;
    //            selectedElementId = null;
    //            selectedElementType = null;

    $('body').on('click', function (event) {
        if (!$(event.target).hasClass('import-ouvrage') && !$(event.target).hasClass('delete-composant') && $(event.target).attr('id') != 'import-ouvrage' && !$(event.target).hasClass('check-ouvrage') && !$(event.target).hasClass('paginate_button'))
            $('.selected').each(function () {
                $(this).removeClass('selected');
                selectedElement = null;
                selectedElementId = null;
                selectedElementType = null;
                $('.context-menu').remove();
            });
        const selector = '.elements .' + (event.target.classList[0] ? event.target.classList[0] : "unselect");
        if (document.querySelector(selector) && selectedElement) {

            if ($(event.target).is('li') && selectedElement) {
                let firstDiv = $(this).find('div:first');
                firstDiv.addClass('selected');
                selectedElement = $(this);
                selectedElementId = firstDiv.attr('id').replaceAll('element-', '');
                selectedElementType = firstDiv.attr('type');
            } else {
                const closestLi = $(event.target).closest('li');
                if (closestLi.length && selectedElement) {
                    let firstDiv = closestLi.find('div:first');
                    firstDiv.addClass('selected');
                    selectedElement = firstDiv;
                    selectedElementId = firstDiv.attr('id').replaceAll('element-', '');
                    selectedElementType = firstDiv.attr('type');
                }
            }
        }
    });


    // ajout d'un ouvrage
    $('#add-ouvrage').click(function () {
        $('#modal-ouvrage').remove();
        let path = "{{ path('app_affaire_modal_ouvrage') }}";
        $.post(path, function (data) {
            $('body').append(JSON.parse(data).message);
            $("#modal-ouvrage").modal('show');

        })
    })

    // un ecouteur qui detecte le choix d'ouvrage sur le quel on se base afin de le copier
    /*$('body').on("change", '.select-ouvrage', function () {

            let id = $(this).attr('ouvrages');
            let origine = $(this).val();

            let path = '/affaire/devis/ouvrage/origine/add/'+ "{{ devis.id }}" +"/"+ id+'/'+origine;

            $.post(path, function (response) {
                response = JSON.parse(response);
                if (response.code === 200) {
                    $('#ouvrage-ul-'+id).append(response.html)
                    updateData(response.data)
                    $('#devis_ouvrages_'+id+'_denomination').attr('disabled',true);
                }
            })
    })*/

    function calculDebourseTotalHT(quantite, prixUnitaireHT, id, type, quantite2=null) {
        let debourseTotalHT = 0;
        if (quantite2 == null) {
            debourseTotalHT = (quantite * prixUnitaireHT).toFixed(3);
        }else {
            debourseTotalHT = (quantite * prixUnitaireHT * quantite2).toFixed(3);
        }
        $("#devis_" + type + "_" + id + "_debourseTotalHT").attr('value', debourseTotalHT)
        return debourseTotalHT;
    }

    function calculPrixDeVente(debourseTotalHt, marge, id, type) {
        const prixDeVenteHt = (debourseTotalHt * marge ).toFixed(3);
        $("#devis_" + type + "_" + id + "_prix_de_vente").attr('value', prixDeVenteHt)
        return prixDeVenteHt;
    }

    // la fonction permet de mettre à jour les valeurs de calculs qui ont été changé par une action (modification/suppression/ajout etc)

    function updateData(data) {

        data.forEach(function (element) {
            if (element.type === "devis") {
                $('input[name="devis[marge]"]').attr("value", element.marge.toFixed(3));
                $('input[name="devis[marge]"]').val(element.marge.toFixed(3));
                $('input[name="devis[prixDeVenteHT]"]').attr("value", element.prixDeVenteHT.toFixed(3));
                $('input[name="devis[debourseTotalHT]"]').attr("value", element.debourseTotalHT.toFixed(3));
                $('input[name="devis[margeTotal]"]').attr("value", (element.prixDeVenteHT - element.debourseTotalHT).toFixed(3));
                $('input[name="devis[prixDeVente]"]').attr("value", (element.prixDeVenteHT + (element.tva / 100 * element.prixDeVenteHT)).toFixed(3));



            } else {
                console.log(data);
                $('input[name="devis[' + element.type + '][' + element.id + '][denomination]"]').attr("value", element.denomination);
                $('input[name="devis[' + element.type + '][' + element.id + '][quantite]"]').attr("value", element.quantite);
                $('input[name="devis[' + element.type + '][' + element.id + '][quantite2]"]').attr("value", element.quantite2);
                $('input[name="devis[' + element.type + '][' + element.id + '][quantite2Show]"]').attr("value", element.quantite2);
                $('input[name="devis[' + element.type + '][' + element.id + '][marge]"]').attr("value", element.marge.toFixed(3));
                $('input[name="devis[' + element.type + '][' + element.id + '][marge]"]').val(element.marge.toFixed(3));
                if (element.marge < 1.3 ) {
                    $('input[name="devis[' + element.type + '][' + element.id + '][marge]"]').css('color', 'red');
                } else {
                    $('input[name="devis[' + element.type + '][' + element.id + '][marge]"]').css('color', '#486581');
                }
                if (element.type === "composants") {
                    $('input[name="devis[' + element.type + '][' + element.id + '][prixDeVente]"]').attr("value", (element.debourseTotalHT * element.marge).toFixed(3));
                } else {
                    $('input[name="devis[' + element.type + '][' + element.id + '][prixDeVente]"]').attr("value", element.prixDeVenteHT.toFixed(3));
                }
                $('input[name="devis[' + element.type + '][' + element.id + '][debourseTotalHT]"]').attr("value", element.debourseTotalHT.toFixed(3));
            }

        })
        $("#loader-devis-page").modal("hide");


    }

    // lorsqu'on detecte un changement daans un champ on le sauvegarde et on recalcule les valeurs 
    $('body').on("change", 'input, select', function () {

        $("#loader-devis-page").modal("show");

        if ($(this).hasClass('select-ouvrage')) {
            return;
        }

        let type = $(this).attr('element');
        if (type === 'devis') {
            let marge = parseFloat($('input[name="devis[marge]"]').val().replace(',', '.'));
            const devis = {
                marge: marge,
            }
            let path = "{{ path('app_affaire_devis_calcul_edit',{id:devis.id}) }}";
            $.post(path, {devis}, function (response) {
                response = JSON.parse(response);
                if (response.code === 200) {
                    $("#loader-devis-page").modal("hide");
                    updateData(response.data);
                }
            })
        } else {

            let id = $(this).attr(type);

            let quantite = parseInt($('input[name="devis[' + type + '][' + id + '][quantite]"]').val());
            let quantite2 = parseInt($('input[name="devis[' + type + '][' + id + '][quantite2]"]').val());
            let marge = parseFloat($('input[name="devis[' + type + '][' + id + '][marge]"]').val().replace(',', '.'));
            let code = $('input[name="devis[' + type + '][' + id + '][code]"]').val();
            let denomination = $('input[name="devis[' + type + '][' + id + '][denomination]"]').val();
            let unite = $('select[name="devis[' + type + '][' + id + '][unite]"]').val();
            let prixUnite = type !== "ouvrages" ? parseFloat($('input[name="devis[' + type + '][' + id + '][debourseUnitaireHT]"]').val().replace(',', '.')) : 0.0;
            //$("#loader-devis-page").modal("show");
            console.log(type, id, quantite2);
            if (type == "composants") {
                const debourseTotalHT = calculDebourseTotalHT(quantite, prixUnite, id, type, quantite2);
                const prixDeVenteHt = calculPrixDeVente(debourseTotalHT, marge, id, type);
                const composant = {
                    code: code,
                    denomination: denomination,
                    unite: unite,
                    quantite: isNaN(quantite) ? 0 : quantite,
                    quantite2: isNaN(quantite2) ? 0 : quantite2,
                    duht: prixUnite,
                    dtht: debourseTotalHT,
                    prixDeVenteHT: prixDeVenteHt,
                    marge: marge,
                    note: null,
                }
                let path = '/affaire/bibliothequeDePrix/composant/edit/' + id;

                $.post(path, {composant}, function (response) {
                    response = JSON.parse(response);
                    if (response.code === 200) {
                        $("#loader-devis-page").modal("hide");
                        updateData(response.data);
                    }
                })
            }

            if (type === 'ouvrages') {
                const ouvrage = {
                    code: code,
                    denomination: denomination,
                    unite: unite,
                    quantite: isNaN(quantite) ? 0 : quantite,
                    note: null,
                    marge: marge,
                }
                let path = '/affaire/bibliothequeDePrix/ouvrage/edit/' + id;
                $.post(path, {ouvrage}, function (response) {
                    response = JSON.parse(response);
                    if (response.code === 200) {
                        $("#loader-devis-page").modal("hide");
                        updateData(response.data);
                    }
                })

            }

            if (type == "lots") {
                const lot = {
                    code: code,
                    denomination: denomination,
                    unite: unite,
                    quantite: isNaN(quantite) ? 0 : quantite,
                    prix: prixUnite,
                    marge: marge,

                };
                let path = '/affaire/devis/edit/lot/' + id;
                $.post(path, {lot}, function (response) {
                    response = JSON.parse(response);
                    if (response.code === 200) {
                        $("#loader-devis-page").modal("hide");
                        updateData(response.data);
                    }
                })
            }

        }
    })

    // supprimer les char non numerique 
    $('.numbers').keyup(function () {
        this.value = this.value.replace(/[^0-9\.\,]/g, '');
    });

    function afficherMenu() {
        $('#menu-marge').css('display', 'block');
    }

    $(document).on('click', function (e) {
        if (!$(e.target).closest('#menu-marge').length) {
            $('#menu-marge').css('display', 'none');
        }
    });

    $('#encadre-marge').on('click', function (e) {
        e.stopPropagation();
        afficherMenu();
    });

    var currentOuvrageId = null;
    var currentOuvrageTypeId = null;
    const cadenceDeRerefence = ("{{ cadenceDeRerefence }}").replace(/[^\d,]/g, "").replace(',', '.');


    // fonction qui permet d'appeler la pop up qui sert à importer un ouvrage
    $('body').on('click', '.import-ouvrage', function () {
        $("#loader-devis-page").modal("show");
        $('#modal-import-ouvrage').remove();

        let id = $(this).attr('id').replace('import-ouvrage-', '');
        currentOuvrageId = id;
        console.log($(this), id)
        $.post('/affaire/bibliothequeDePrix/modal/ouvrage/liste/'+{{ devis.id }}+
        '/' + id, function (response) {
            const data = JSON.parse(response);
            $("#loader-devis-page").modal("hide");
            $('body').append(data.html);
            $("#modal-import-ouvrage").modal("show");
            $('#form-' + currentOuvrageId + ' select').each(function () {
                if ($(this).parent().hasClass('d-none') && $(this).val() != "") {
                    $(this).parent().removeClass('d-none');
                }
            })

        }
    )
    })


    $('body').on('change', '.ouvrage-attribut', function () {
        const step = $(this).parent().parent().attr('step');
        console.log("step : " + step);
        if (step === "1") {

            $(".ouvrage-attribut-step-2").addClass("d-none");
            $(".step-2").removeClass('d-none');
            currentOuvrageTypeId = $(this).val();
            $('.to-' + currentOuvrageTypeId).removeClass('d-none');
            $('.ouvrage-attribut-step-2 select').attr('required', false);
            $('.attribut-select-step2-' + currentOuvrageTypeId).attr('required', true);
            $("#devis_ouvrages_" + currentOuvrageId + "_poidsDeReference").val(0);
            $("#devis_ouvrages_" + currentOuvrageId + "_tpsDeReference").val(0);
            $('.attribut-select-step2-' + currentOuvrageTypeId).each(function (index) {
                $(this).val("")
            })


        } else if (step === "2") {
            if (currentOuvrageTypeId === null && $('#type_ouvrage_' + currentOuvrageId).val() != "") {
                currentOuvrageTypeId = $('#type_ouvrage_' + currentOuvrageId).val();
            }
            let poids = 0;
            let tps = 0;
            $('.attribut-select-step2-' + currentOuvrageTypeId).each(function (index) {
                if (!isNaN(parseFloat($('option:selected', this).attr('poids'))) && !isNaN(parseFloat($('option:selected', this).attr('tps')))) {
                    console.log(poids, tps)
                    poids += parseFloat($('option:selected', this).attr('poids'));
                    tps += parseFloat($('option:selected', this).attr('tps'));
                }
            })

            let pourcentageTps = tps / cadenceDeRerefence * 100;
            $("#devis_ouvrages_" + currentOuvrageId + "_pourcentageTpsDeReference").val(pourcentageTps.toFixed(2));
            $("#devis_ouvrages_" + currentOuvrageId + "_poidsDeReference").val(poids);
            $("#devis_ouvrages_" + currentOuvrageId + "_tpsDeReference").val(tps);
            calculPrixUnitaireComposant();

        }
    });

    $('body').on('click', '#calcul-prix-unitaire', function () {
        calculPrixUnitaireComposant();
    })

    function calculPrixUnitaireComposant(update = false) {
        let res = 0;

        const codeOuvrage = $('#type_ouvrage_' + currentOuvrageId).find('option:selected').attr('code');
        const k = $("#devis_ouvrages_" + currentOuvrageId + "_poidsDeReference").val();
        const t = $("#devis_ouvrages_" + currentOuvrageId + "_pourcentageTpsDeReference").val();
        $(".td-prix-" + currentOuvrageId).each(function () {
            const variante = parseFloat($(this).attr(codeOuvrage));
            const code = $(this).attr('code');
            const cadence = parseFloat($(this).attr('cadence'));

            console.log(variante, k, t, cadence)
            switch (code) {
                case "L":
                    //"(valeur du tableau « Composants v2 » pour la ligne « Location » et la colonne « Echafaudage ») x K / 1000 / 30"
                    res = variante * k / 1000 / 30;
                    break;
                case "M":
                    //"[ (valeur du tableau « Composants v2 » pour la ligne « Montage » et la colonne « Echafaudage ») x K /
                    // (valeur du tableau « Composants v2 » pour la ligne « Montage » et la colonne « Cadence » ) ] x [ 1 + ( T /100 ) ]"
                    res = variante * k / cadence * (1 + (t / 100));
                    break;
                case "D":
                    // " [ (valeur du tableau « Composants v2 » pour la ligne « Démontage » et la colonne « Echafaudage ») x K /
                    // (valeur du tableau « Composants v2 » pour la ligne « Démontage » et la colonne « Cadence » ) ] x [ 1 + ( T/100 ) ]"
                    res = variante * k / cadence * (1 + (t / 100));
                    break;
                case "MA":
                    // "(valeur du tableau « Composants v2 » pour la ligne « Manutention Appro » et la colonne « Echafaudage ») x K / 
                    // (valeur du tableau « Composants v2 » pour la ligne « Manutention Appro » et la colonne « Cadence » )"
                    res = variante * k / cadence;
                    break;
                case "MR":
                    //  res = "(valeur du tableau « Composants v2 » pour la ligne « Manutention Repli » et la colonne « Echafaudage ») x K /
                    // (valeur du tableau « Composants v2 » pour la ligne « Manutention Repli » et la colonne « Cadence » )"
                    res = variante * k / cadence;
                    break;
                case "TA":
                    // res = "(valeur du tableau « Composants v2 » pour la ligne « Transport Aller » et la colonne « Echafaudage ») x K / 1000 "
                    res = variante * k / 1000;
                    break;
                case "TR":
                    //  res = "(valeur du tableau « Composants v2 » pour la ligne « Transport Retour » et la colonne « Echafaudage ») x K / 1000 "
                    res = variante * k / 1000;
                    break;
            }
            res = res.toFixed(2);
            $(this).val(res);
            if (update) {
                //modifie la valeur des inputs debourse unitaire des composants
                const id = $(this).attr('id').replace('_debourseUnitaireHT_modal', '');
                console.log(id)
                $("#" + id + "_debourseUnitaireHT").attr('value', res);

                //modifie la valeur des inputs debourse total des composants
                $("#" + id + "_debourseTotalHT").attr('value', parseInt($("#" + id + "_quantite").val()) * res);

                //modifie la valeur des inputs prix de vente des composants
                $("#" + id + "_prix_de_vente").attr('value', ($("#" + id + "_debourseTotalHT").val() * $("#" + id + "_marge").val()).toFixed(2));

            }
        })
    }

    function validateForm() {
        event.preventDefault();
        let isValide = true;
        $('#form-' + currentOuvrageId + ' select').each(function () {
            if (!$(this).parent().hasClass('d-none') && $(this).val() == "") {
                $(this).addClass('invalid');
                isValide = false;
            } else {
                $(this).removeClass('invalid');
            }
        })
        if (isValide) {

            $('#form-' + currentOuvrageId + ' select').each(function () {
                if ($(this).parent().hasClass('d-none')) {
                    $(this).remove();
                }
            })
            // Récupérer l'élément de formulaire
            const form = document.getElementById('form-' + currentOuvrageId);

            // Créer un objet FormData à partir du formulaire
            const formData = new FormData(form);


            $('.form-submit-loader').show();
            // Effectuer la requête AJAX en utilisant fetch ou XMLHttpRequest
            fetch('/affaire/attribut/ouvrage/set/' + currentOuvrageId, {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.code == 200) {
                        calculPrixUnitaireComposant(true);
                        $('#modal-import-ouvrage').modal('hide');
                        $('#modal-import-ouvrage').remove();
                        currentOuvrageId = null;
                        updateData(data.data);

                    }
                    // Traiter la réponse du serveur
                    console.log(data);
                })
                .catch(error => {
                    // Gérer les erreurs de la requête
                    console.error(error);
                });
        }


    }


    // fonction qui permet d'importer des ouvrages (non utilisé pour l'instant)
    /* $("body").on('click', '#import-ouvrage', function () {
         $('#modal-import-ouvrage').remove();
         let id = $(this).attr('id').replace('import-ouvrage-','');

         $.post('/affaire/bibliothequeDePrix/modal/ouvrage/liste/'+{{ devis.id }}+'/'+id', function (response) {
            const data = JSON.parse(response);
            $('body').append(data.html);
            $("#modal-import-ouvrage").modal("show");
            $('.datatable').DataTable({
                "oLanguage": {
                    sSearch: "",
                    searchPlaceholder: "Chercher"

                },
                language: {
                    searchPlaceholder: "Chercher"
                },
                order: [[0, 'desc']],
                pageLength: 25,


            });
        })
    })*/

    // non utilisé
    function submitImportOuvrageEvent(event) {
        var parentId = selectedElementId;
        var parentType = selectedElementType;
        event.preventDefault();
        //console.log(parentId, parentType);
        let data = {};
        $('.check-ouvrage').each(function (index) {
            if ($(this).is(':checked')) {
                data[index] = {
                    parentId: selectedElementId,
                    parentType: selectedElementType,
                    id: $(this).val(),
                    order: null,
                }
            }
        })

        $.post("{{ path('app_affaire_ouvrage_import',{'id':devis.id}) }}", data, function (response) {
            let data = JSON.parse(response);
            if (data.code === 200) {

                $("#modal-import-ouvrage").modal("show");
                if (data.code === 200) {
                    $('#ouvrage-import-success').show();
                    setTimeout(() => {
                        $('#modal-import-ouvrage').modal('hide');
                        $('#modal-import-ouvrage').remove();

                    }, "1000");
                    if (parentId != null && parentType == "lot") {
                        $("<div class='children' parent='lot-" + parentId + "'>" + data.html + "</div>").insertAfter($('#element-' + parentId));
                        //console.log(parentId);
                        while (parentId) {
                            let sumParent = 0;

                            $("[parent-dht='" + parentId + "']").each(function () {
                                let debourseOuvrage = parseFloat($('#devis_ouvrages_' + $(this).attr('ouvrage') + '_debourseTotalHT').val());
                                if (!isNaN(debourseOuvrage)) {
                                    sumParent += debourseOuvrage;
                                }
                            });
                            $("[parent-dtht='" + parentId + "']").each(function () {
                                let debourseLot = parseFloat($('#devis_lots_' + $(this).attr('lot') + '_debourse').val());
                                if (!isNaN(debourseLot)) {
                                    sumParent += debourseLot;
                                }
                            });
                            $("#devis_lots_" + parentId + "_debourse").val(sumParent.toFixed(3));

                            parentId = $("#devis_lots_" + parentId + "_debourse").attr('parent-dtht');
                        }

                    } else {
                        $('#main-devis').append(data.html);
                    }
                    $('.svg').remove();
                    $('.organisation').remove();
                    $('.css-gg4vpm').show();


                } else {
                    $('#ouvrage-import-danger').show();
                    setTimeout(() => {
                        $('#modal-import-ouvrage').modal('hide');
                        $('#modal-import-ouvrage').remove();
                    }, "3000")
                }
                //    location.reload();

            }
        })
    }


    // non utilisé
    function hasSomeParentTheClass(element, classname) {
        if (element.className && element.className.split(' ').indexOf(classname) >= 0) {
            return true;
        } else if (element.parentNode) {
            hasSomeParentTheClass(element.parentNode, classname)
        } else {
            return false
        }
    }

    $(document).ready(function() {
        $('body').on('click', '.hide-composants', function() {
            let id = $(this).attr('id');
            var composants = $('#ouvrage-ul-' + id);

            if (composants.hasClass('ouvrage-children')) {
                composants.slideDown();
                composants.removeClass('ouvrage-children');
                $(this).toggleClass('down');
            } else {
                composants.slideUp();
                composants.addClass('ouvrage-children');
                $(this).toggleClass('down');
            }
        });
    });


</script>

